CCS PCM C Compiler, Version 5.051, 53960               28-Jun-16 13:45

               Filename:   F:\Project\Project Anh Tai\2016\Can Loadcell\Can Load Cell 5Kg\LoadCell code\main.lst

               ROM used:   1036 words (13%)
                           Largest free fragment is 2048
               RAM used:   20 (5%) at main() level
                           34 (9%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   302
0003:  NOP
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA 20,26
000D:  DATA EF,30
000E:  DATA 64,10
000F:  DATA C3,32
0010:  DATA 6C,36
0011:  DATA 20,24
0012:  DATA D8,1B
0013:  DATA B1,18
0014:  DATA 20,00
0015:  DATA 20,26
0016:  DATA EF,30
0017:  DATA 64,10
0018:  DATA C3,32
0019:  DATA 6C,36
001A:  DATA 20,24
001B:  DATA D8,1B
001C:  DATA B1,18
001D:  DATA 20,00
001E:  DATA A0,2B
001F:  DATA E5,34
0020:  DATA 67,34
0021:  DATA A0,12
0022:  DATA EC,3A
0023:  DATA A0,33
0024:  DATA 20,10
0025:  DATA 20,10
0026:  DATA 20,10
0027:  DATA 20,10
0028:  DATA 00,00
0029:  DATA A0,2B
002A:  DATA E5,34
002B:  DATA 67,34
002C:  DATA A0,12
002D:  DATA EC,3A
002E:  DATA A0,33
002F:  DATA 20,10
0030:  DATA 20,10
0031:  DATA 20,10
0032:  DATA 20,10
0033:  DATA 00,00
0034:  DATA A0,2B
0035:  DATA E5,34
0036:  DATA 67,34
0037:  DATA A0,12
0038:  DATA 64,17
0039:  DATA 25,32
003A:  DATA 25,32
003B:  DATA 25,32
003C:  DATA A0,25
003D:  DATA 67,00
*
010A:  MOVF   0B,W
010B:  MOVWF  2B
010C:  BCF    0B.7
010D:  BSF    03.5
010E:  BSF    03.6
010F:  BSF    0C.7
0110:  BSF    0C.0
0111:  NOP
0112:  NOP
0113:  BCF    03.5
0114:  BCF    03.6
0115:  BTFSC  2B.7
0116:  BSF    0B.7
0117:  BSF    03.6
0118:  MOVF   0C,W
0119:  ANDLW  7F
011A:  BTFSC  03.2
011B:  GOTO   15E
011C:  BCF    03.6
011D:  MOVWF  2B
011E:  BSF    03.6
011F:  MOVF   0D,W
0120:  BCF    03.6
0121:  MOVWF  2C
0122:  BSF    03.6
0123:  MOVF   0F,W
0124:  BCF    03.6
0125:  MOVWF  2D
0126:  MOVF   2B,W
0127:  MOVWF  34
0128:  CALL   0E6
0129:  MOVF   2C,W
012A:  BSF    03.6
012B:  MOVWF  0D
012C:  BCF    03.6
012D:  MOVF   2D,W
012E:  BSF    03.6
012F:  MOVWF  0F
0130:  BCF    03.6
0131:  MOVF   0B,W
0132:  MOVWF  2E
0133:  BCF    0B.7
0134:  BSF    03.5
0135:  BSF    03.6
0136:  BSF    0C.7
0137:  BSF    0C.0
0138:  NOP
0139:  NOP
013A:  BCF    03.5
013B:  BCF    03.6
013C:  BTFSC  2E.7
013D:  BSF    0B.7
013E:  BSF    03.6
013F:  RLF    0C,W
0140:  RLF    0E,W
0141:  ANDLW  7F
0142:  BTFSC  03.2
0143:  GOTO   15E
0144:  BCF    03.6
0145:  MOVWF  2B
0146:  BSF    03.6
0147:  MOVF   0D,W
0148:  BCF    03.6
0149:  MOVWF  2C
014A:  BSF    03.6
014B:  MOVF   0F,W
014C:  BCF    03.6
014D:  MOVWF  2D
014E:  MOVF   2B,W
014F:  MOVWF  34
0150:  CALL   0E6
0151:  MOVF   2C,W
0152:  BSF    03.6
0153:  MOVWF  0D
0154:  BCF    03.6
0155:  MOVF   2D,W
0156:  BSF    03.6
0157:  MOVWF  0F
0158:  INCF   0D,F
0159:  BTFSC  03.2
015A:  INCF   0F,F
015B:  BCF    03.6
015C:  GOTO   10A
015D:  BSF    03.6
015E:  BCF    03.6
015F:  RETURN
*
01B7:  MOVF   0B,W
01B8:  MOVWF  2C
01B9:  BCF    0B.7
01BA:  BSF    03.5
01BB:  BSF    03.6
01BC:  BSF    0C.7
01BD:  BSF    0C.0
01BE:  NOP
01BF:  NOP
01C0:  BCF    03.5
01C1:  BCF    03.6
01C2:  BTFSC  2C.7
01C3:  BSF    0B.7
01C4:  BTFSC  03.0
01C5:  GOTO   1EE
01C6:  BSF    03.6
01C7:  MOVF   0C,W
01C8:  ANDLW  7F
01C9:  BCF    03.6
01CA:  MOVWF  2C
01CB:  BSF    03.6
01CC:  MOVF   0D,W
01CD:  BCF    03.6
01CE:  MOVWF  2D
01CF:  BSF    03.6
01D0:  MOVF   0F,W
01D1:  BCF    03.6
01D2:  MOVWF  2E
01D3:  MOVF   2C,W
01D4:  MOVWF  34
01D5:  CALL   0E6
01D6:  MOVF   2D,W
01D7:  BSF    03.6
01D8:  MOVWF  0D
01D9:  BCF    03.6
01DA:  MOVF   2E,W
01DB:  BSF    03.6
01DC:  MOVWF  0F
01DD:  BCF    03.6
01DE:  MOVF   0B,W
01DF:  MOVWF  2F
01E0:  BCF    0B.7
01E1:  BSF    03.5
01E2:  BSF    03.6
01E3:  BSF    0C.7
01E4:  BSF    0C.0
01E5:  NOP
01E6:  NOP
01E7:  BCF    03.5
01E8:  BCF    03.6
01E9:  BTFSC  2F.7
01EA:  BSF    0B.7
01EB:  DECFSZ 2B,F
01EC:  GOTO   1EE
01ED:  GOTO   20D
01EE:  BSF    03.6
01EF:  RLF    0C,W
01F0:  RLF    0E,W
01F1:  ANDLW  7F
01F2:  BCF    03.6
01F3:  MOVWF  2C
01F4:  BSF    03.6
01F5:  MOVF   0D,W
01F6:  BCF    03.6
01F7:  MOVWF  2D
01F8:  BSF    03.6
01F9:  MOVF   0F,W
01FA:  BCF    03.6
01FB:  MOVWF  2E
01FC:  MOVF   2C,W
01FD:  MOVWF  34
01FE:  CALL   0E6
01FF:  MOVF   2D,W
0200:  BSF    03.6
0201:  MOVWF  0D
0202:  BCF    03.6
0203:  MOVF   2E,W
0204:  BSF    03.6
0205:  MOVWF  0F
0206:  INCF   0D,F
0207:  BTFSC  03.2
0208:  INCF   0F,F
0209:  BCF    03.0
020A:  BCF    03.6
020B:  DECFSZ 2B,F
020C:  GOTO   1B7
020D:  RETURN
020E:  CLRF   33
020F:  MOVF   04,W
0210:  MOVWF  32
0211:  BCF    33.0
0212:  BTFSC  03.7
0213:  BSF    33.0
0214:  SWAPF  2C,W
0215:  IORLW  F0
0216:  MOVWF  2E
0217:  ADDWF  2E,F
0218:  ADDLW  E2
0219:  MOVWF  2F
021A:  ADDLW  32
021B:  MOVWF  31
021C:  MOVF   2C,W
021D:  ANDLW  0F
021E:  ADDWF  2F,F
021F:  ADDWF  2F,F
0220:  ADDWF  31,F
0221:  ADDLW  E9
0222:  MOVWF  30
0223:  ADDWF  30,F
0224:  ADDWF  30,F
0225:  SWAPF  2B,W
0226:  ANDLW  0F
0227:  ADDWF  30,F
0228:  ADDWF  31,F
0229:  RLF    30,F
022A:  RLF    31,F
022B:  COMF   31,F
022C:  RLF    31,F
022D:  MOVF   2B,W
022E:  ANDLW  0F
022F:  ADDWF  31,F
0230:  RLF    2E,F
0231:  MOVLW  07
0232:  MOVWF  2D
0233:  MOVLW  0A
0234:  ADDWF  31,F
0235:  DECF   30,F
0236:  BTFSS  03.0
0237:  GOTO   234
0238:  ADDWF  30,F
0239:  DECF   2F,F
023A:  BTFSS  03.0
023B:  GOTO   238
023C:  ADDWF  2F,F
023D:  DECF   2E,F
023E:  BTFSS  03.0
023F:  GOTO   23C
0240:  ADDWF  2E,F
0241:  DECF   2D,F
0242:  BTFSS  03.0
0243:  GOTO   240
0244:  MOVLW  2D
0245:  MOVWF  04
0246:  BCF    03.7
0247:  MOVLW  07
0248:  ANDWF  32,W
0249:  BCF    32.6
024A:  ADDWF  04,F
024B:  MOVLW  31
024C:  SUBWF  04,W
024D:  BTFSC  03.2
024E:  BSF    32.6
024F:  MOVF   00,W
0250:  MOVWF  77
0251:  BTFSS  03.2
0252:  GOTO   25B
0253:  BTFSC  32.6
0254:  GOTO   25B
0255:  BTFSC  32.4
0256:  GOTO   26D
0257:  BTFSC  32.3
0258:  GOTO   25B
0259:  MOVLW  20
025A:  GOTO   25E
025B:  BSF    32.3
025C:  BCF    32.4
025D:  MOVLW  30
025E:  ADDWF  77,F
025F:  CLRF   2C
0260:  MOVF   04,W
0261:  MOVWF  2B
0262:  BCF    2C.0
0263:  BTFSC  03.7
0264:  BSF    2C.0
0265:  MOVF   77,W
0266:  MOVWF  34
0267:  CALL   0E6
0268:  MOVF   2B,W
0269:  MOVWF  04
026A:  BCF    03.7
026B:  BTFSC  2C.0
026C:  BSF    03.7
026D:  INCF   04,F
026E:  BTFSS  32.6
026F:  GOTO   24B
0270:  RETURN
0271:  CLRF   78
0272:  CLRF   79
0273:  CLRF   77
0274:  CLRF   7A
0275:  MOVF   30,W
0276:  BTFSS  03.2
0277:  GOTO   27B
0278:  MOVF   2F,W
0279:  BTFSC  03.2
027A:  GOTO   295
027B:  MOVLW  10
027C:  MOVWF  31
027D:  BCF    03.0
027E:  RLF    2D,F
027F:  RLF    2E,F
0280:  RLF    77,F
0281:  RLF    7A,F
0282:  MOVF   30,W
0283:  SUBWF  7A,W
0284:  BTFSS  03.2
0285:  GOTO   288
0286:  MOVF   2F,W
0287:  SUBWF  77,W
0288:  BTFSS  03.0
0289:  GOTO   291
028A:  MOVF   2F,W
028B:  SUBWF  77,F
028C:  BTFSS  03.0
028D:  DECF   7A,F
028E:  MOVF   30,W
028F:  SUBWF  7A,F
0290:  BSF    03.0
0291:  RLF    78,F
0292:  RLF    79,F
0293:  DECFSZ 31,F
0294:  GOTO   27D
0295:  RETURN
0296:  MOVF   32,W
0297:  CLRF   78
0298:  SUBWF  31,W
0299:  BTFSC  03.0
029A:  GOTO   29E
029B:  MOVF   31,W
029C:  MOVWF  77
029D:  GOTO   2AA
029E:  CLRF   77
029F:  MOVLW  08
02A0:  MOVWF  33
02A1:  RLF    31,F
02A2:  RLF    77,F
02A3:  MOVF   32,W
02A4:  SUBWF  77,W
02A5:  BTFSC  03.0
02A6:  MOVWF  77
02A7:  RLF    78,F
02A8:  DECFSZ 33,F
02A9:  GOTO   2A1
02AA:  RETURN
02AB:  MOVLW  20
02AC:  BTFSS  2C.4
02AD:  MOVLW  30
02AE:  MOVWF  2D
02AF:  MOVF   2B,W
02B0:  MOVWF  77
02B1:  BTFSS  2B.7
02B2:  GOTO   2BB
02B3:  COMF   77,F
02B4:  INCF   77,F
02B5:  MOVF   77,W
02B6:  MOVWF  2B
02B7:  MOVLW  2D
02B8:  MOVWF  2D
02B9:  BSF    2C.7
02BA:  BSF    2C.0
02BB:  MOVF   2B,W
02BC:  MOVWF  31
02BD:  MOVLW  64
02BE:  MOVWF  32
02BF:  CALL   296
02C0:  MOVF   77,W
02C1:  MOVWF  2B
02C2:  MOVLW  30
02C3:  ADDWF  78,W
02C4:  MOVWF  2E
02C5:  MOVF   2B,W
02C6:  MOVWF  31
02C7:  MOVLW  0A
02C8:  MOVWF  32
02C9:  CALL   296
02CA:  MOVLW  30
02CB:  ADDWF  77,W
02CC:  MOVWF  30
02CD:  MOVLW  30
02CE:  ADDWF  78,W
02CF:  MOVWF  2F
02D0:  MOVF   2D,W
02D1:  MOVWF  77
02D2:  MOVLW  30
02D3:  SUBWF  2E,W
02D4:  BTFSC  03.2
02D5:  GOTO   2DA
02D6:  BSF    2C.1
02D7:  BTFSC  2C.7
02D8:  BSF    2C.2
02D9:  GOTO   2EE
02DA:  MOVF   2D,W
02DB:  MOVWF  2E
02DC:  MOVLW  20
02DD:  MOVWF  2D
02DE:  MOVLW  30
02DF:  SUBWF  2F,W
02E0:  BTFSC  03.2
02E1:  GOTO   2E6
02E2:  BSF    2C.0
02E3:  BTFSC  2C.7
02E4:  BSF    2C.1
02E5:  GOTO   2EE
02E6:  BTFSS  03.2
02E7:  BSF    2C.0
02E8:  BTFSS  03.2
02E9:  GOTO   2EE
02EA:  MOVF   2E,W
02EB:  MOVWF  2F
02EC:  MOVLW  20
02ED:  MOVWF  2E
02EE:  BTFSC  2C.2
02EF:  GOTO   2F5
02F0:  BTFSC  2C.1
02F1:  GOTO   2F8
02F2:  BTFSC  2C.0
02F3:  GOTO   2FB
02F4:  GOTO   2FE
02F5:  MOVF   2D,W
02F6:  MOVWF  34
02F7:  CALL   0E6
02F8:  MOVF   2E,W
02F9:  MOVWF  34
02FA:  CALL   0E6
02FB:  MOVF   2F,W
02FC:  MOVWF  34
02FD:  CALL   0E6
02FE:  MOVF   30,W
02FF:  MOVWF  34
0300:  CALL   0E6
0301:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay(clock = 20000000)  //Su dung thach anh 20Mhz   
*
003E:  MOVLW  35
003F:  MOVWF  04
0040:  BCF    03.7
0041:  MOVF   00,W
0042:  BTFSC  03.2
0043:  GOTO   051
0044:  MOVLW  06
0045:  MOVWF  78
0046:  CLRF   77
0047:  DECFSZ 77,F
0048:  GOTO   047
0049:  DECFSZ 78,F
004A:  GOTO   046
004B:  MOVLW  7B
004C:  MOVWF  77
004D:  DECFSZ 77,F
004E:  GOTO   04D
004F:  DECFSZ 00,F
0050:  GOTO   044
0051:  RETURN
.................... #fuses HS,NOWDT,PROTECT,BROWNOUT,PUT,NOLVP,NOCPD,NOWRT,NOCPD   //Fuse bituse fast_io(C) 
.................... #use fast_io(D) 
.................... #define LCD_DB4   PIN_B3 
.................... #define LCD_DB5   PIN_B2 
.................... #define LCD_DB6   PIN_B1 
.................... #define LCD_DB7   PIN_B0 
....................  
.................... #define LCD_E     PIN_B4 
.................... #define LCD_RS    PIN_B5 
.................... #include <lcd16x2.c> 
....................  
.................... //#define LCD_RW    PIN_D6 
....................  
.................... // If you only want a 6-pin interface to your LCD, then 
.................... // connect the R/W pin on the LCD to ground, and comment 
.................... // out the following line. 
....................  
.................... //#define USE_LCD_RW   1      
....................  
.................... //======================================== 
....................  
.................... #define lcd_type 2        // 0=5x7, 1=5x10, 2=2 lines 
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line 
....................  
....................  
.................... int8 const LCD_INIT_STRING[4] = 
.................... { 
....................  0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots 
....................  0xc,                    // Display on 
....................  1,                      // Clear display 
....................  6                       // Increment cursor 
....................  }; 
....................                               
....................  
.................... //------------------------------------- 
.................... void lcd_send_nibble(int8 nibble) 
.................... { 
.................... // Note:  !! converts an integer expression 
.................... // to a boolean (1 or 0). 
....................  output_bit(LCD_DB4, !!(nibble & 1)); 
0052:  BTFSC  3C.0
0053:  GOTO   056
0054:  BCF    06.3
0055:  GOTO   057
0056:  BSF    06.3
0057:  BSF    03.5
0058:  BCF    06.3
....................  output_bit(LCD_DB5, !!(nibble & 2));  
0059:  BCF    03.5
005A:  BTFSC  3C.1
005B:  GOTO   05E
005C:  BCF    06.2
005D:  GOTO   05F
005E:  BSF    06.2
005F:  BSF    03.5
0060:  BCF    06.2
....................  output_bit(LCD_DB6, !!(nibble & 4));    
0061:  BCF    03.5
0062:  BTFSC  3C.2
0063:  GOTO   066
0064:  BCF    06.1
0065:  GOTO   067
0066:  BSF    06.1
0067:  BSF    03.5
0068:  BCF    06.1
....................  output_bit(LCD_DB7, !!(nibble & 8));    
0069:  BCF    03.5
006A:  BTFSC  3C.3
006B:  GOTO   06E
006C:  BCF    06.0
006D:  GOTO   06F
006E:  BSF    06.0
006F:  BSF    03.5
0070:  BCF    06.0
....................  
....................  delay_cycles(1); 
0071:  NOP
....................  output_high(LCD_E); 
0072:  BCF    06.4
0073:  BCF    03.5
0074:  BSF    06.4
....................  delay_us(2); 
0075:  MOVLW  03
0076:  MOVWF  77
0077:  DECFSZ 77,F
0078:  GOTO   077
....................  output_low(LCD_E); 
0079:  BSF    03.5
007A:  BCF    06.4
007B:  BCF    03.5
007C:  BCF    06.4
007D:  RETURN
.................... } 
....................  
.................... //----------------------------------- 
.................... // This sub-routine is only called by lcd_read_byte(). 
.................... // It's not a stand-alone routine.  For example, the 
.................... // R/W signal is set high by lcd_read_byte() before 
.................... // this routine is called.      
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_nibble(void) 
.................... { 
.................... int8 retval; 
.................... // Create bit variables so that we can easily set 
.................... // individual bits in the retval variable. 
.................... #bit retval_0 = retval.0 
.................... #bit retval_1 = retval.1 
.................... #bit retval_2 = retval.2 
.................... #bit retval_3 = retval.3 
....................  
.................... retval = 0; 
....................     
.................... output_high(LCD_E); 
.................... delay_cycles(1); 
....................  
.................... retval_0 = input(LCD_DB4); 
.................... retval_1 = input(LCD_DB5); 
.................... retval_2 = input(LCD_DB6); 
.................... retval_3 = input(LCD_DB7); 
....................   
.................... output_low(LCD_E); 
....................     
.................... return(retval);    
.................... }    
.................... #endif 
....................  
.................... //--------------------------------------- 
.................... // Read a byte from the LCD and return it. 
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_byte(void) 
.................... { 
.................... int8 low; 
.................... int8 high; 
....................  
.................... output_high(LCD_RW); 
.................... delay_cycles(1); 
....................  
.................... high = lcd_read_nibble(); 
....................  
.................... low = lcd_read_nibble(); 
....................  
.................... return( (high<<4) | low); 
.................... } 
.................... #endif 
....................  
.................... //---------------------------------------- 
.................... // Send a byte to the LCD. 
.................... void lcd_send_byte(int8 address, int8 n) 
.................... { 
.................... output_low(LCD_RS); 
007E:  BSF    03.5
007F:  BCF    06.5
0080:  BCF    03.5
0081:  BCF    06.5
....................  
.................... #ifdef USE_LCD_RW 
.................... while(bit_test(lcd_read_byte(),7)) ; 
.................... #else 
.................... delay_us(60);  
0082:  MOVLW  63
0083:  MOVWF  77
0084:  DECFSZ 77,F
0085:  GOTO   084
0086:  GOTO   087
.................... #endif 
....................  
.................... if(address) 
0087:  MOVF   39,F
0088:  BTFSC  03.2
0089:  GOTO   08F
....................    output_high(LCD_RS); 
008A:  BSF    03.5
008B:  BCF    06.5
008C:  BCF    03.5
008D:  BSF    06.5
008E:  GOTO   093
.................... else 
....................    output_low(LCD_RS); 
008F:  BSF    03.5
0090:  BCF    06.5
0091:  BCF    03.5
0092:  BCF    06.5
....................       
....................  delay_cycles(1); 
0093:  NOP
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
.................... delay_cycles(1); 
.................... #endif 
....................  
.................... output_low(LCD_E); 
0094:  BSF    03.5
0095:  BCF    06.4
0096:  BCF    03.5
0097:  BCF    06.4
....................  
.................... lcd_send_nibble(n >> 4); 
0098:  SWAPF  3A,W
0099:  MOVWF  3B
009A:  MOVLW  0F
009B:  ANDWF  3B,F
009C:  MOVF   3B,W
009D:  MOVWF  3C
009E:  CALL   052
.................... lcd_send_nibble(n & 0xf); 
009F:  MOVF   3A,W
00A0:  ANDLW  0F
00A1:  MOVWF  3B
00A2:  MOVWF  3C
00A3:  CALL   052
00A4:  RETURN
.................... } 
....................  
.................... //---------------------------- 
.................... void lcd_init(void) 
.................... { 
.................... int8 i; 
....................  
.................... output_low(LCD_RS); 
00A5:  BSF    03.5
00A6:  BCF    06.5
00A7:  BCF    03.5
00A8:  BCF    06.5
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
.................... #endif 
....................  
.................... output_low(LCD_E); 
00A9:  BSF    03.5
00AA:  BCF    06.4
00AB:  BCF    03.5
00AC:  BCF    06.4
....................  
.................... delay_ms(15); 
00AD:  MOVLW  0F
00AE:  MOVWF  35
00AF:  CALL   03E
....................  
.................... for(i=0 ;i < 3; i++) 
00B0:  CLRF   2B
00B1:  MOVF   2B,W
00B2:  SUBLW  02
00B3:  BTFSS  03.0
00B4:  GOTO   0BD
....................    { 
....................     lcd_send_nibble(0x03); 
00B5:  MOVLW  03
00B6:  MOVWF  3C
00B7:  CALL   052
....................     delay_ms(5); 
00B8:  MOVLW  05
00B9:  MOVWF  35
00BA:  CALL   03E
00BB:  INCF   2B,F
00BC:  GOTO   0B1
....................    } 
....................  
.................... lcd_send_nibble(0x02); 
00BD:  MOVLW  02
00BE:  MOVWF  3C
00BF:  CALL   052
....................  
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++) 
00C0:  CLRF   2B
00C1:  MOVF   2B,W
00C2:  SUBLW  03
00C3:  BTFSS  03.0
00C4:  GOTO   0D1
....................    { 
....................     lcd_send_byte(0, LCD_INIT_STRING[i]); 
00C5:  MOVF   2B,W
00C6:  CALL   004
00C7:  MOVWF  2C
00C8:  CLRF   39
00C9:  MOVF   2C,W
00CA:  MOVWF  3A
00CB:  CALL   07E
....................     
....................     // If the R/W signal is not used, then 
....................     // the busy bit can't be polled.  One of 
....................     // the init commands takes longer than 
....................     // the hard-coded delay of 60 us, so in 
....................     // that case, lets just do a 5 ms delay 
....................     // after all four of them. 
....................     #ifndef USE_LCD_RW 
....................     delay_ms(5); 
00CC:  MOVLW  05
00CD:  MOVWF  35
00CE:  CALL   03E
....................     #endif 
00CF:  INCF   2B,F
00D0:  GOTO   0C1
....................    } 
00D1:  BCF    0A.3
00D2:  BCF    0A.4
00D3:  GOTO   313 (RETURN)
....................  
.................... } 
....................  
.................... //---------------------------- 
....................  
.................... void lcd_gotoxy(int8 x, int8 y) 
.................... { 
.................... int8 address; 
....................  
.................... if(y != 1) 
00D4:  DECFSZ 36,W
00D5:  GOTO   0D7
00D6:  GOTO   0DA
....................    address = lcd_line_two; 
00D7:  MOVLW  40
00D8:  MOVWF  37
00D9:  GOTO   0DB
.................... else 
....................    address=0; 
00DA:  CLRF   37
....................  
.................... address += x-1; 
00DB:  MOVLW  01
00DC:  SUBWF  35,W
00DD:  ADDWF  37,F
.................... lcd_send_byte(0, 0x80 | address); 
00DE:  MOVF   37,W
00DF:  IORLW  80
00E0:  MOVWF  38
00E1:  CLRF   39
00E2:  MOVF   38,W
00E3:  MOVWF  3A
00E4:  CALL   07E
00E5:  RETURN
.................... } 
....................  
.................... //----------------------------- 
.................... void lcd_putc(char c) 
.................... { 
....................  switch(c) 
00E6:  MOVF   34,W
00E7:  XORLW  0C
00E8:  BTFSC  03.2
00E9:  GOTO   0F1
00EA:  XORLW  06
00EB:  BTFSC  03.2
00EC:  GOTO   0F9
00ED:  XORLW  02
00EE:  BTFSC  03.2
00EF:  GOTO   0FF
00F0:  GOTO   104
....................    { 
....................     case '\f': 
....................       lcd_send_byte(0,1); 
00F1:  CLRF   39
00F2:  MOVLW  01
00F3:  MOVWF  3A
00F4:  CALL   07E
....................       delay_ms(2); 
00F5:  MOVLW  02
00F6:  MOVWF  35
00F7:  CALL   03E
....................       break; 
00F8:  GOTO   109
....................     
....................     case '\n': 
....................        lcd_gotoxy(1,2); 
00F9:  MOVLW  01
00FA:  MOVWF  35
00FB:  MOVLW  02
00FC:  MOVWF  36
00FD:  CALL   0D4
....................        break; 
00FE:  GOTO   109
....................     
....................     case '\b': 
....................        lcd_send_byte(0,0x10); 
00FF:  CLRF   39
0100:  MOVLW  10
0101:  MOVWF  3A
0102:  CALL   07E
....................        break; 
0103:  GOTO   109
....................     
....................     default: 
....................        lcd_send_byte(1,c); 
0104:  MOVLW  01
0105:  MOVWF  39
0106:  MOVF   34,W
0107:  MOVWF  3A
0108:  CALL   07E
....................        break; 
....................    } 
0109:  RETURN
.................... } 
....................  
.................... //------------------------------ 
.................... #ifdef USE_LCD_RW 
.................... char lcd_getc(int8 x, int8 y) 
.................... { 
.................... char value; 
....................  
.................... lcd_gotoxy(x,y); 
....................  
.................... // Wait until busy flag is low. 
.................... while(bit_test(lcd_read_byte(),7));  
....................  
.................... output_high(LCD_RS); 
.................... value = lcd_read_byte(); 
.................... output_low(LCD_RS); 
....................  
.................... return(value); 
.................... } 
.................... #endif 
....................  
.................... //hx711 
.................... #define ADDO      PIN_D0  
.................... #define ADSK      PIN_C3 
....................  
.................... //read weigh loadcell 
.................... unsigned int32 ReadCount(){  
*
0160:  CLRF   2E
0161:  CLRF   2D
0162:  CLRF   2C
0163:  CLRF   2B
....................   unsigned int32 Count = 0;  
....................   unsigned int8 i,  convert_1,  convert_2,  convert_3;  
....................   output_high(ADDO);             
0164:  BSF    08.0
....................   output_low(ADSK);  
0165:  BCF    20.3
0166:  MOVF   20,W
0167:  BSF    03.5
0168:  MOVWF  07
0169:  BCF    03.5
016A:  BCF    07.3
....................   Count=0;  
016B:  CLRF   2E
016C:  CLRF   2D
016D:  CLRF   2C
016E:  CLRF   2B
....................   while(input(ADDO));  
016F:  BTFSC  08.0
0170:  GOTO   16F
....................   for (i=0;i<24;i++){  
0171:  CLRF   2F
0172:  MOVF   2F,W
0173:  SUBLW  17
0174:  BTFSS  03.0
0175:  GOTO   193
....................     output_high(ADSK);  
0176:  BCF    20.3
0177:  MOVF   20,W
0178:  BSF    03.5
0179:  MOVWF  07
017A:  BCF    03.5
017B:  BSF    07.3
....................     Count=Count<<1;  
017C:  BCF    03.0
017D:  RLF    2B,F
017E:  RLF    2C,F
017F:  RLF    2D,F
0180:  RLF    2E,F
....................     output_low(ADSK); 
0181:  BCF    20.3
0182:  MOVF   20,W
0183:  BSF    03.5
0184:  MOVWF  07
0185:  BCF    03.5
0186:  BCF    07.3
....................     if(input(ADDO)) Count++;  
0187:  BTFSS  08.0
0188:  GOTO   191
0189:  MOVLW  01
018A:  ADDWF  2B,F
018B:  BTFSC  03.0
018C:  INCF   2C,F
018D:  BTFSC  03.2
018E:  INCF   2D,F
018F:  BTFSC  03.2
0190:  INCF   2E,F
0191:  INCF   2F,F
0192:  GOTO   172
....................   }  
....................   output_high(ADSK);  
0193:  BCF    20.3
0194:  MOVF   20,W
0195:  BSF    03.5
0196:  MOVWF  07
0197:  BCF    03.5
0198:  BSF    07.3
....................   Count=Count|0x80;   
0199:  BSF    2B.7
....................   output_low(ADSK);  
019A:  BCF    20.3
019B:  MOVF   20,W
019C:  BSF    03.5
019D:  MOVWF  07
019E:  BCF    03.5
019F:  BCF    07.3
....................   convert_1=MAKE8(Count, 0); 
01A0:  MOVF   2B,W
01A1:  MOVWF  30
....................   convert_2=MAKE8(Count, 1);  
01A2:  MOVF   2C,W
01A3:  MOVWF  31
....................   convert_3=MAKE8(Count, 2); 
01A4:  MOVF   2D,W
01A5:  MOVWF  32
....................   convert_2=(convert_2 & 0b11111000); 
01A6:  MOVLW  F8
01A7:  ANDWF  31,F
....................   Count= MAKE16(convert_3, convert_2); 
01A8:  MOVF   32,W
01A9:  MOVWF  2C
01AA:  MOVF   31,W
01AB:  MOVWF  2B
01AC:  CLRF   2D
01AD:  CLRF   2E
....................   return(Count);  
01AE:  MOVF   2B,W
01AF:  MOVWF  77
01B0:  MOVF   2C,W
01B1:  MOVWF  78
01B2:  MOVF   2D,W
01B3:  MOVWF  79
01B4:  MOVF   2E,W
01B5:  MOVWF  7A
01B6:  RETURN
.................... } 
.................... unsigned int donvi ,chuc ,tram ,nghin; 
.................... void main(){ 
*
0302:  MOVF   03,W
0303:  ANDLW  1F
0304:  MOVWF  03
0305:  MOVLW  FF
0306:  MOVWF  20
0307:  CLRF   26
0308:  CLRF   25
0309:  BSF    03.5
030A:  BSF    1F.0
030B:  BSF    1F.1
030C:  BSF    1F.2
030D:  BCF    1F.3
030E:  MOVLW  07
030F:  MOVWF  1C
0310:  BCF    03.7
....................    lcd_init(); 
0311:  BCF    03.5
0312:  GOTO   0A5
....................    unsigned int16 weighs, weigh; 
....................    lcd_gotoxy(1,1); 
0313:  MOVLW  01
0314:  MOVWF  35
0315:  MOVWF  36
0316:  CALL   0D4
....................    printf(lcd_putc, " Load Cell HX711 "); 
0317:  MOVLW  0C
0318:  BSF    03.6
0319:  MOVWF  0D
031A:  MOVLW  00
031B:  MOVWF  0F
031C:  BCF    03.6
031D:  CALL   10A
....................    delay_ms(1000); 
031E:  MOVLW  04
031F:  MOVWF  2B
0320:  MOVLW  FA
0321:  MOVWF  35
0322:  CALL   03E
0323:  DECFSZ 2B,F
0324:  GOTO   320
....................  
....................    weigh = ReadCount();   
0325:  CALL   160
0326:  MOVF   78,W
0327:  MOVWF  2A
0328:  MOVF   77,W
0329:  MOVWF  29
....................    while(true){       
....................          lcd_gotoxy(1,1); 
032A:  MOVLW  01
032B:  MOVWF  35
032C:  MOVWF  36
032D:  CALL   0D4
....................          //printf(lcd_putc, " -------------- "); 
....................          printf(lcd_putc, " Load Cell HX711 "); 
032E:  MOVLW  15
032F:  BSF    03.6
0330:  MOVWF  0D
0331:  MOVLW  00
0332:  MOVWF  0F
0333:  BCF    03.6
0334:  CALL   10A
....................          lcd_gotoxy(1,2); 
0335:  MOVLW  01
0336:  MOVWF  35
0337:  MOVLW  02
0338:  MOVWF  36
0339:  CALL   0D4
....................          weighs = ReadCount()-weigh; 
033A:  CALL   160
033B:  MOVF   29,W
033C:  SUBWF  77,W
033D:  MOVWF  27
033E:  MOVF   78,W
033F:  MOVWF  28
0340:  MOVF   2A,W
0341:  BTFSS  03.0
0342:  INCFSZ 2A,W
0343:  SUBWF  28,F
....................          if(weighs > 10000) 
0344:  MOVF   28,W
0345:  SUBLW  26
0346:  BTFSC  03.0
0347:  GOTO   36D
0348:  XORLW  FF
0349:  BTFSS  03.2
034A:  GOTO   34F
034B:  MOVF   27,W
034C:  SUBLW  10
034D:  BTFSC  03.0
034E:  GOTO   36D
....................          { 
....................             weighs = 0;   
034F:  CLRF   28
0350:  CLRF   27
....................             printf(lcd_putc, " Weigh %lu g        ", weighs); 
0351:  MOVLW  1E
0352:  BSF    03.6
0353:  MOVWF  0D
0354:  MOVLW  00
0355:  MOVWF  0F
0356:  BCF    03.0
0357:  MOVLW  07
0358:  BCF    03.6
0359:  MOVWF  2B
035A:  CALL   1B7
035B:  MOVLW  10
035C:  MOVWF  04
035D:  MOVF   28,W
035E:  MOVWF  2C
035F:  MOVF   27,W
0360:  MOVWF  2B
0361:  CALL   20E
0362:  MOVLW  23
0363:  BSF    03.6
0364:  MOVWF  0D
0365:  MOVLW  00
0366:  MOVWF  0F
0367:  BCF    03.0
0368:  MOVLW  0A
0369:  BCF    03.6
036A:  MOVWF  2B
036B:  CALL   1B7
....................          } 
036C:  GOTO   40A
....................          else 
....................             if(weighs < 1000){ 
036D:  MOVF   28,W
036E:  SUBLW  03
036F:  BTFSS  03.0
0370:  GOTO   393
0371:  BTFSS  03.2
0372:  GOTO   377
0373:  MOVF   27,W
0374:  SUBLW  E7
0375:  BTFSS  03.0
0376:  GOTO   393
....................                printf(lcd_putc, " Weigh %lu g        ", weighs); 
0377:  MOVLW  29
0378:  BSF    03.6
0379:  MOVWF  0D
037A:  MOVLW  00
037B:  MOVWF  0F
037C:  BCF    03.0
037D:  MOVLW  07
037E:  BCF    03.6
037F:  MOVWF  2B
0380:  CALL   1B7
0381:  MOVLW  10
0382:  MOVWF  04
0383:  MOVF   28,W
0384:  MOVWF  2C
0385:  MOVF   27,W
0386:  MOVWF  2B
0387:  CALL   20E
0388:  MOVLW  2E
0389:  BSF    03.6
038A:  MOVWF  0D
038B:  MOVLW  00
038C:  MOVWF  0F
038D:  BCF    03.0
038E:  MOVLW  0A
038F:  BCF    03.6
0390:  MOVWF  2B
0391:  CALL   1B7
....................             } 
0392:  GOTO   40A
....................             else{ 
....................                donvi =  weighs % 10;  
0393:  MOVF   28,W
0394:  MOVWF  2E
0395:  MOVF   27,W
0396:  MOVWF  2D
0397:  CLRF   30
0398:  MOVLW  0A
0399:  MOVWF  2F
039A:  CALL   271
039B:  MOVF   77,W
039C:  MOVWF  21
....................                chuc  = (weighs/10) % 10;  
039D:  MOVF   28,W
039E:  MOVWF  2E
039F:  MOVF   27,W
03A0:  MOVWF  2D
03A1:  CLRF   30
03A2:  MOVLW  0A
03A3:  MOVWF  2F
03A4:  CALL   271
03A5:  MOVF   79,W
03A6:  MOVWF  2C
03A7:  MOVF   78,W
03A8:  MOVWF  2B
03A9:  MOVF   79,W
03AA:  MOVWF  2E
03AB:  MOVF   78,W
03AC:  MOVWF  2D
03AD:  CLRF   30
03AE:  MOVLW  0A
03AF:  MOVWF  2F
03B0:  CALL   271
03B1:  MOVF   77,W
03B2:  MOVWF  22
....................                tram  = (weighs/100) % 10;  
03B3:  MOVF   28,W
03B4:  MOVWF  2E
03B5:  MOVF   27,W
03B6:  MOVWF  2D
03B7:  CLRF   30
03B8:  MOVLW  64
03B9:  MOVWF  2F
03BA:  CALL   271
03BB:  MOVF   79,W
03BC:  MOVWF  2C
03BD:  MOVF   78,W
03BE:  MOVWF  2B
03BF:  MOVF   79,W
03C0:  MOVWF  2E
03C1:  MOVF   78,W
03C2:  MOVWF  2D
03C3:  CLRF   30
03C4:  MOVLW  0A
03C5:  MOVWF  2F
03C6:  CALL   271
03C7:  MOVF   77,W
03C8:  MOVWF  23
....................                nghin = (weighs/1000) % 10;  
03C9:  MOVF   28,W
03CA:  MOVWF  2E
03CB:  MOVF   27,W
03CC:  MOVWF  2D
03CD:  MOVLW  03
03CE:  MOVWF  30
03CF:  MOVLW  E8
03D0:  MOVWF  2F
03D1:  CALL   271
03D2:  MOVF   79,W
03D3:  MOVWF  2C
03D4:  MOVF   78,W
03D5:  MOVWF  2B
03D6:  MOVF   79,W
03D7:  MOVWF  2E
03D8:  MOVF   78,W
03D9:  MOVWF  2D
03DA:  CLRF   30
03DB:  MOVLW  0A
03DC:  MOVWF  2F
03DD:  CALL   271
03DE:  MOVF   77,W
03DF:  MOVWF  24
....................                printf(lcd_putc, " Weigh %d.%d%d%d Kg", nghin, tram, chuc, donvi); 
03E0:  MOVLW  34
03E1:  BSF    03.6
03E2:  MOVWF  0D
03E3:  MOVLW  00
03E4:  MOVWF  0F
03E5:  BCF    03.0
03E6:  MOVLW  07
03E7:  BCF    03.6
03E8:  MOVWF  2B
03E9:  CALL   1B7
03EA:  MOVF   24,W
03EB:  MOVWF  2B
03EC:  MOVLW  18
03ED:  MOVWF  2C
03EE:  CALL   2AB
03EF:  MOVLW  2E
03F0:  MOVWF  34
03F1:  CALL   0E6
03F2:  MOVF   23,W
03F3:  MOVWF  2B
03F4:  MOVLW  18
03F5:  MOVWF  2C
03F6:  CALL   2AB
03F7:  MOVF   22,W
03F8:  MOVWF  2B
03F9:  MOVLW  18
03FA:  MOVWF  2C
03FB:  CALL   2AB
03FC:  MOVF   21,W
03FD:  MOVWF  2B
03FE:  MOVLW  18
03FF:  MOVWF  2C
0400:  CALL   2AB
0401:  MOVLW  20
0402:  MOVWF  34
0403:  CALL   0E6
0404:  MOVLW  4B
0405:  MOVWF  34
0406:  CALL   0E6
0407:  MOVLW  67
0408:  MOVWF  34
0409:  CALL   0E6
....................             } 
040A:  GOTO   32A
....................              
....................  
....................    } 
.................... } 
....................  
040B:  SLEEP

Configuration Fuses:
   Word  1: 0F42   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG PROTECT
